opcode = {
    '0x00': 'unreachable',
    '0x01': 'nop',
    '0x02': 'block',
    '0x03': 'loop',
    '0x04': 'if',
    '0x05': 'else',
    '0x06': '',
    '0x07': '',
    '0x08': '',
    '0x09': '',
    '0x0A': '',
    '0x0B': 'end',
    '0x0C': 'br',
    '0x0D': 'br_if',
    '0x0E': 'br_table',
    '0x0F': 'return',
    '0x10': 'call',
    '0x11': 'call_indirect',
    '0x12': '',
    '0x13': '',
    '0x14': '',
    '0x15': '',
    '0x16': '',
    '0x17': '',
    '0x18': '',
    '0x19': '',
    '0x1A': 'drop',
    '0x1B': 'select',
    '0x1C': '',
    '0x1D': '',
    '0x1E': '',
    '0x1F': '',
    '0x20': 'get_local',
    '0x21': 'set_local',
    '0x22': 'tee_local',
    '0x23': 'get_global',
    '0x24': 'set_global',
    '0x25': '',
    '0x26': '',
    '0x27': '',
    '0x28': 'i32.load',
    '0x29': 'i64.load',
    '0x2A': 'f32.load',
    '0x2B': 'f64.load',
    '0x2C': 'i32.load8_s',
    '0x2D': 'i32.load8_u',
    '0x2E': 'i32.load16_s',
    '0x2F': 'i32.load16_u',
    '0x30': 'i64.load8_s',
    '0x31': 'i64.load8_u',
    '0x32': 'i64.load16_s',
    '0x33': 'i64.load16_u',
    '0x34': 'i64.load32_s',
    '0x35': 'i64.load32_u',
    '0x36': 'i32.store',
    '0x37': 'i64.store',
    '0x38': 'f32.store',
    '0x39': 'f64.store',
    '0x3A': 'i32.store8',
    '0x3B': 'i32.store16',
    '0x3C': 'i64.store8',
    '0x3D': 'i64.store16',
    '0x3E': 'i64.store32',
    '0x3F': 'memory.size',
    '0x40': 'memory.grow',
    '0x41': 'i32.const',
    '0x42': 'i64.const',
    '0x43': 'f32.const',
    '0x44': 'f64.const',
    '0x45': 'i32.eqz',
    '0x46': 'i32.eq',
    '0x47': 'i32.ne',
    '0x48': 'i32.lt_s',
    '0x49': 'i32.lt_u',
    '0x4A': 'i32.gt_s',
    '0x4B': 'i32.gt_u',
    '0x4C': 'i32.le_s',
    '0x4D': 'i32.le_u',
    '0x4E': 'i32.ge_s',
    '0x4F': 'i32.ge_u',
    '0x50': 'i32.eq',
    '0x51': 'i64.eq',
    '0x52': 'i64.ne',
    '0x53': 'i64.lt_s',
    '0x54': 'i64.lt_u',
    '0x55': 'i64.gt_s',
    '0x56': 'i64.gt_u',
    '0x57': 'i64.le_s',
    '0x58': 'i64.le_u',
    '0x59': 'i64.ge_s',
    '0x5A': 'i64.ge_u',
    '0x5B': 'f32.eq',
    '0x5C': 'f32.ne',
    '0x5D': 'f32.lt',
    '0x5E': 'f32.gt',
    '0x5F': 'f32.le',
    '0x60': 'f32.ge',
    '0x61': 'f64.eq',
    '0x62': 'f64.ne',
    '0x63': 'f64.lt',
    '0x64': 'f64.gt',
    '0x65': 'f64.le',
    '0x66': 'f64.ge',
    '0x67': 'i32.clz',
    '0x68': 'i32.ctz',
    '0x69': 'i32.popcnt',
    '0x6A': 'i32.add',
    '0x6B': 'i32.sub',
    '0x6C': 'i32.mul',
    '0x6D': 'i32.div_s',
    '0x6E': 'i32.div_s',
    '0x6F': 'i32.rem_s',
    '0x70': 'i32.rem_u',
    '0x71': 'i32.and',
    '0x72': 'i32.or',
    '0x73': 'i32.xor',
    '0x74': 'i32.shl',
    '0x75': 'i32.shr_s',
    '0x76': 'i32.shr_u',
    '0x77': 'i32.rotl',
    '0x78': 'i32.rotr',
    '0x79': 'i64.clz',
    '0x7A': 'i64.ctz',
    '0x7B': 'i64.popcnt',
    '0x7C': 'i64.add',
    '0x7D': 'i64.sub',
    '0x7E': 'i64.mul',
    '0x7F': 'i64.div_s',
    '0x80': 'i64.div_u',
    '0x81': 'i64.rem_s',
    '0x82': 'i64.rem_u',
    '0x83': 'i64.and',
    '0x84': 'i64.or',
    '0x85': 'i64.xor',
    '0x86': 'i64.shl',
    '0x87': 'i64.shr_s',
    '0x88': 'i64.shr_u',
    '0x89': 'i64.rotl',
    '0x8A': 'i64.rotr',
    '0x8B': 'i64.abs',
    '0x8C': 'f32.neg',
    '0x8D': 'f32.ceil',
    '0x8E': 'f32.floor',
    '0x8F': 'f32.trunc',
    '0x90': 'f32.nearest',
    '0x91': 'f32.sqrt',
    '0x92': 'f32.add',
    '0x93': 'f32.sub',
    '0x94': 'f32.mul',
    '0x95': 'f32.div',
    '0x96': 'f32.min',
    '0x97': 'f32.max',
    '0x98': 'f32.copysign',
    '0x99': 'f64.abs',
    '0x9A': 'f64.neg',
    '0x9B': 'f64.ceil',
    '0x9C': 'f64.floor',
    '0x9D': 'f64.trunc',
    '0x9E': 'f64.nearest',
    '0x9F': 'f64.sqrt',
    '0xA0': 'f64.add',
    '0xA1': 'f64.sub',
    '0xA2': 'f64.mul',
    '0xA3': 'f64.div',
    '0xA4': 'f64.min',
    '0xA5': 'f64.max',
    '0xA6': 'f64.copysign',
    '0xA7': 'i32.wrap/i64',
    '0xA8': 'i32.trunc_s/f32',
    '0xA9': 'i32.trunc_u/f32',
    '0xAA': 'i32.trunc_s/f64',
    '0xAB': 'i32.trunc_u/f64',
    '0xAC': 'i64.extend_s/i32',
    '0xAD': 'i64.extend_u/i32',
    '0xAE': 'i64.trunc_s/f32',
    '0xAF': 'i64.trunc_u/f64',
    '0xB0': 'i64.trunc_s/f64',
    '0xB1': 'i64.trunc_u/f64',
    '0xB2': 'f32.convert_s/i32',
    '0xB3': 'f32.convert_u/i32',
    '0xB4': 'f32.convert_s/i64',
    '0xB5': 'f32.convert_u/i64',
    '0xB6': 'f32.demote/f64',
    '0xB7': 'f64.convert_s/i32',
    '0xB8': 'f64.convert_u/i32',
    '0xB9': 'f64.convert_s/i64',
    '0xBA': 'f64.convert_u/i64',
    '0xBB': 'f64.promote/f32',
    '0xBC': 'i32.reinterpret/f32',
    '0xBD': 'i64.reinterpret/f64',
    '0xBE': 'f32.reinterpret/i32',
    '0xBF': 'f64.reinterpret/i64'
}

operand_u32 = (
    'get_local',
    'set_local',
    'tee_local',
    'get_global',
    'set_global',
    'i32.const',
    'f32.const',
    'call',
    'call_indirect'
    'br',
    'br_if',
)

operand_u64 = (
    'i64.const',
    'f64.const',
    'i32.load',
    'i64.load',
    'f32.load',
    'f64.load',
    'i32.load8_s',
    'i32.load8_u',
    'i32.load16_s',
    'i32.load16_u',
    'i64.load8_s',
    'i64.load8_u',
    'i64.load16_s',
    'i64.load16_u',
    'i64.load32_s',
    'i64.load32_u',
    'i32.store',
    'i64.store',
    'f32.store',
    'f64.store',
    'i32.store8',
    'i32.store16',
    'i64.store8',
    'i64.store16',
    'i64.store32'
)

operand_memarg = (
    'i32.load',
    'i64.load',
    'f32.load',
    'f64.load',
    'i32.load8_s',
    'i32.load8_u',
    'i32.load16_s',
    'i32.load16_u',
    'i64.load8_s',
    'i64.load8_u',
    'i64.load16_s',
    'i64.load16_u',
    'i64.load32_s',
    'i64.load32_u',
    'i32.store',
    'i64.store',
    'f32.store',
    'f64.store',
    'i32.store8',
    'i32.store16',
    'i64.store8',
    'i64.store16',
    'i64.store32'
)

operand = {
    'unreachable': [0x00, 0],
    'nop': [0x01, 0],
    'block': [0x02, 0],
    'loop': [0x03, 0],
    'if': [0x04, 0],
    'else': [0x05, 0],
    'end': [0x0B, 0],
    'br': [0x0C, 1],
    'br_if': [0x0D, 1],
    'br_table': [0x0E, 0],
    'return': [0x0F, 0],
    'call': [0x10, 1],
    'call_indirect': [0x11, 1,, # The above items are waited to be corrected.
    'drop': [0x1A, 0],
    'select': [0x1B, 0],
    'get_local': [0x20, 1],
    'set_local': [0x21, 1],
    'tee_local': [0x22, 1],
    'get_global',
    'set_global',
    '',
    '',
    '',
    'i32.load',
    'i64.load',
    'f32.load',
    'f64.load',
    'i32.load8_s',
    'i32.load8_u',
    'i32.load16_s',
    'i32.load16_u',
    'i64.load8_s',
    'i64.load8_u',
    'i64.load16_s',
    'i64.load16_u',
    'i64.load32_s',
    'i64.load32_u',
    'i32.store',
    'i64.store',
    'f32.store',
    'f64.store',
    'i32.store8',
    'i32.store16',
    'i64.store8',
    'i64.store16',
    'i64.store32',
    'memory.size',
    'memory.grow',
    'i32.const',
    'i64.const',
    'f32.const',
    'f64.const',
    'i32.eqz',
    'i32.eq',
    'i32.ne',
    'i32.lt_s',
    'i32.lt_u',
    'i32.gt_s',
    'i32.gt_u',
    'i32.le_s',
    'i32.le_u',
    'i32.ge_s',
    'i32.ge_u',
    'i32.eq',
    'i64.eq',
    'i64.ne',
    'i64.lt_s',
    'i64.lt_u',
    'i64.gt_s',
    'i64.gt_u',
    'i64.le_s',
    'i64.le_u',
    'i64.ge_s',
    'i64.ge_u',
    'f32.eq',
    'f32.ne',
    'f32.lt',
    'f32.gt',
    'f32.le',
    'f32.ge',
    'f64.eq',
    'f64.ne',
    'f64.lt',
    'f64.gt',
    'f64.le',
    'f64.ge',
    'i32.clz',
    'i32.ctz',
    'i32.popcnt',
    'i32.add',
    'i32.sub',
    'i32.mul',
    'i32.div_s',
    'i32.div_s',
    'i32.rem_s',
    'i32.rem_u',
    'i32.and',
    'i32.or',
    'i32.xor',
    'i32.shl',
    'i32.shr_s',
    'i32.shr_u',
    'i32.rotl',
    'i32.rotr',
    'i64.clz',
    'i64.ctz',
    'i64.popcnt',
    'i64.add',
    'i64.sub',
    'i64.mul',
    'i64.div_s',
    'i64.div_u',
    'i64.rem_s',
    'i64.rem_u',
    'i64.and',
    'i64.or',
    'i64.xor',
    'i64.shl',
    'i64.shr_s',
    'i64.shr_u',
    'i64.rotl',
    'i64.rotr',
    'i64.abs',
    'f32.neg',
    'f32.ceil',
    'f32.floor',
    'f32.trunc',
    'f32.nearest',
    'f32.sqrt',
    'f32.add',
    'f32.sub',
    'f32.mul',
    'f32.div',
    'f32.min',
    'f32.max',
    'f32.copysign',
    'f64.abs',
    'f64.neg',
    'f64.ceil',
    'f64.floor',
    'f64.trunc',
    'f64.nearest',
    'f64.sqrt',
    'f64.add',
    'f64.sub',
    'f64.mul',
    'f64.div',
    'f64.min',
    'f64.max',
    'f64.copysign',
    'i32.wrap/i64',
    'i32.trunc_s/f32',
    'i32.trunc_u/f32',
    'i32.trunc_s/f64',
    'i32.trunc_u/f64',
    'i64.extend_s/i32',
    'i64.extend_u/i32',
    'i64.trunc_s/f32',
    'i64.trunc_u/f64',
    'i64.trunc_s/f64',
    'i64.trunc_u/f64',
    'f32.convert_s/i32',
    'f32.convert_u/i32',
    'f32.convert_s/i64',
    'f32.convert_u/i64',
    'f32.demote/f64',
    'f64.convert_s/i32',
    'f64.convert_u/i32',
    'f64.convert_s/i64',
    'f64.convert_u/i64',
    'f64.promote/f32',
    'i32.reinterpret/f32',
    'i64.reinterpret/f64',
    'f32.reinterpret/i32',
    'f64.reinterpret/i64'
}